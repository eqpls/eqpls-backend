[default]
title = DEV
tenant = eqpls
domain = dev.local
endpoint = dev.local
origins = https://dev.local, https://localhost

version = 1
stage = dev

system_access_key = system
system_secret_key = Password1!
admin_username = admin
admin_password = admin
admin_group = Administrators
admin_role = admin
user_group = Users
user_role = user

health_check_interval = 5
health_check_timeout = 2
health_check_retries = 3

account_module = account

modules = postgresql, elasticsearch, redis, keycloak, minio, guacd, guacamole, account, router, uerp, secret, nginx


# NGINX #########################################################################
[nginx]
hostname = nginx
hostaddr = 0.0.0.0
hostport = 443

proxies = account, router, uerp, secret

[nginx:environment]

[nginx:ports]
443/tcp = 0.0.0.0:443
# 9000/tcp = 0.0.0.0:9000

[nginx:volumes]
./webroot = /webroot
./webcert = /webcert
./nginx/conf.d = /conf.d

[nginx:healthcheck]
test = curl -k https://127.0.0.1 || exit 1


# KEYCLOAK ######################################################################
[keycloak]
hostname = keycloak
hostaddr = 0.0.0.0
hostport = 8080

theme =

session_idle_timeout = 1800
session_max_lifespan = 86400
token_lifespan = 900

[keycloak:acl]
data.GroupBucket = r
data.UserBucket = rud
secret.access.OpenSsh = crud
secret.certification.Authority = r
secret.certification.Server = crud

[keycloak:environment]

[keycloak:ports]

[keycloak:volumes]
./keycloak/conf.d/keycloak.conf = /opt/keycloak/conf/keycloak.conf

[keycloak:healthcheck]
test = [ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection) new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/auth/health/live


# ACCOUNT #######################################################################
[account]
hostname = account
hostaddr = 0.0.0.0
hostport = 8080
command = python account

runtime = container
workers = 4

[account:environment]

[account:ports]

[account:volumes]
./account = /opt/account
./project.ini = /opt/project.ini
./common = /opt/common
./driver = /opt/driver
./schema = /opt/schema

[account:healthcheck]
test = python account/health.py


# ROUTER ########################################################################
[router]
hostname = router
hostaddr = 0.0.0.0
hostport = 8080
command = python router

runtime = container
workers = 4

[router:environment]

[router:ports]

[router:volumes]
./router = /opt/router
./project.ini = /opt/project.ini
./common = /opt/common
./driver = /opt/driver
./schema = /opt/schema

[router:healthcheck]
test = python router/health.py


# UERP ##########################################################################
[uerp]
hostname = uerp
hostaddr = 0.0.0.0
hostport = 8080
command = python uerp

runtime = container
workers = 4

[uerp:environment]

[uerp:ports]

[uerp:volumes]
./uerp = /opt/uerp
./project.ini = /opt/project.ini
./common = /opt/common
./driver = /opt/driver
./schema = /opt/schema

[uerp:healthcheck]
test = python uerp/health.py


# SECRET ########################################################################
[secret]
hostname = secret
hostaddr = 0.0.0.0
hostport = 8080
command = python secret

runtime = container
workers = 4

[secret:environment]

[secret:ports]

[secret:volumes]
./secret = /opt/secret
./project.ini = /opt/project.ini
./common = /opt/common
./driver = /opt/driver
./schema = /opt/schema

[secret:healthcheck]
test = python secret/health.py


# MINIO OBJECT STORE ############################################################
[minio]
hostname = minio
hostaddr = 0.0.0.0
hostport = 9001
#command = server --address="0.0.0.0:9000" --console-address=":9001" /data

[minio:environment]
DATA_STORE_LIST = /data

[minio:ports]

[minio:volumes]
./minio/data.d = /data

[minio:healthcheck]
test = curl -f http://localhost:9000/minio/health/live || exit 1


# GUACAMOLE #####################################################################
[guacd]
hostname = guacd
hostaddr = 0.0.0.0
hostport = 4822

[guacd:environment]

[guacd:ports]

[guacd:volumes]

[guacd:healthcheck]

[guacamole]
hostname = guacamole
hostaddr = 0.0.0.0
hostport = 8080
memory = 1g

[guacamole:environment]

[guacamole:ports]

[guacamole:volumes]

[guacamole:healthcheck]


# REDIS #########################################################################
[redis]
hostname = redis
hostaddr = 0.0.0.0
hostport = 6379

[redis:environment]

[redis:ports]

[redis:volumes]

[redis:healthcheck]
test = redis-cli --raw incr ping || exit 1

[redis:account]
database = 0
expire = 300

[redis:model]
database = 1
expire = 3600

[redis:queue]
database = 2
expire = 3600


# ELASTIC SEARCH ################################################################
[elasticsearch]
hostname = elasticsearch
hostaddr = 0.0.0.0
hostport = 9200

# shards <= total cluster memory(heap) * 20
shards = 40
replicas = 0
expire = 604800

[elasticsearch:environment]
discovery.type = single-node

[elasticsearch:ports]

[elasticsearch:volumes]

[elasticsearch:healthcheck]
test = curl -k https://localhost:9200 || exit 1


# POSTGRESQL ####################################################################
[postgresql]
hostname = postgresql
hostaddr = 0.0.0.0
hostport = 5432

database = eqpls

[postgresql:environment]

[postgresql:ports]

[postgresql:volumes]
./postgresql/init.d = /init.d
./postgresql/conf.d = /conf.d
./postgresql/data.d = /var/lib/postgresql/data

[postgresql:healthcheck]
test = pg_isready --username postgres || exit 1
